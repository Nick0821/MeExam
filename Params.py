import argparse

def ParseArgs():
	parser = argparse.ArgumentParser(description='Model Params')
	parser.add_argument('--model', '-m', type=str, default='My_model', help='Model for session-based rec.')
	parser.add_argument('--dataset', '-d', type=str, default='MeExam', help='Benchmarks for session-based rec.')
	parser.add_argument('--validation', action='store_true',
						help='Whether evaluating on validation set (split from train set), otherwise on test set.')
	parser.add_argument('--valid_portion', type=float, default=0.1, help='ratio of validation set.')
	parser.add_argument('--gpu_id', type=str, default='0')
	parser.add_argument('--gpu_multi_id', type=str, default='0,1')
	parser.add_argument('--batch_size', type=int, default=1024)
	parser.add_argument('--log', '-l', type=int, default=0, help='record logs or not')
	parser.add_argument('--log_name', '-ln', type=str, default=None)
	parser.add_argument('--eps', default=0.2, type=float)
	parser.add_argument('--test_train_graph', default=False, type=bool)
	parser.add_argument('--step_size', default=15, type=int)
	parser.add_argument('--Sequential_model', default='Transformer', type=str)
	parser.add_argument('--gpu0_bsz', default='512', type=int)
	parser.add_argument('--gamma', default='0.1', type=float)
	parser.add_argument('--n_layers', default=2, type=int)
	parser.add_argument('--n_heads', default=2, type=int)

	parser.add_argument('--lr', default=1e-3, type=float, help='learning rate')
	parser.add_argument('--batch', default=1024, type=int, help='batch size')
	parser.add_argument('--kg_batch', default=4096, type=int, help='batch size for kg')
	parser.add_argument('--tstBat', default=1024, type=int, help='number of users in a testing batch')
	parser.add_argument('--reg', default=1e-7, type=float, help='weight decay regularizer')
	# parser.add_argument('--epoch', default=25, type=int, help='number of epochs')
	parser.add_argument('--save_path', default='tem', help='file name to save model and training record')
	parser.add_argument('--latdim', default=64, type=int, help='embedding size')
	parser.add_argument('--gnn_layer', default=2, type=int, help='number of gnn layers')
	parser.add_argument('--layer_num_kg', default=2, type=int)
	parser.add_argument('--mess_dropout_rate', default=0.1, type=float)
	parser.add_argument('--pattern', type=str, default='series', help='模型结构')
	parser.add_argument('--mask', type=str, default=False)

	parser.add_argument('--dims', type=str, default='[1000]')
	parser.add_argument('--d_emb_size', type=int, default=10)
	parser.add_argument('--norm', type=bool, default=True)
	parser.add_argument('--steps', type=int, default=5)
	parser.add_argument('--noise_scale', type=float, default=0.1)
	parser.add_argument('--noise_min', type=float, default=0.0001)
	parser.add_argument('--noise_max', type=float, default=0.02)
	parser.add_argument('--sampling_steps', type=int, default=0)

	parser.add_argument('--rebuild_k', type=int, default=30)
	parser.add_argument('--e_loss', type=float, default=0.5)

	parser.add_argument('--keepRate', type=float, default=0.5)
	parser.add_argument('--res_lambda', type=float, default=0.5)
	parser.add_argument('--triplet_num', type=int, default=10)
	parser.add_argument('--cl_pattern', type=int, default=0)

	return parser.parse_args()
args = ParseArgs()